#include <vector>
#include <iostream>
#include <queue>
using namespace std;

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {

        int n = grid.size();
        int m = grid[0].size();

        vector<vector<int>> minutes(n, vector<int>(m, INT_MAX));

        queue<pair<int, int>> q;

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (grid[i][j] == 2)
                {
                    minutes[i][j] = 0;
                    q.push({ i,j });
                }
            }
        }

        int mins = 0;

        while (!q.empty())
        {
            pair<int, int> kords = q.front();
            q.pop();

            int x = kords.first;
            int y = kords.second;

            vector<pair<int, int>> moves = { {0,1}, {0,-1}, {1,0}, {-1,0} };

            for (auto& pos : moves)
            {
                int nx = x + pos.first;
                int ny = y + pos.second;

                if (nx >= 0 && nx < n && ny >= 0 && ny < m)
                {
                    if (grid[nx][ny] == 1 || grid[nx][ny] == 3)
                    {
                        if (minutes[nx][ny] > minutes[x][y] + 1)
                        {
                            minutes[nx][ny] = minutes[x][y] + 1;
                            q.push({ nx, ny });

                            grid[nx][ny] = 3; //3 means it became rotted

                        }
                    }
                }
            }
        }

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                if (grid[i][j] == 3)
                {
                    if (minutes[i][j] > mins)
                    {
                        mins = minutes[i][j];
                    }
                }
                else if (grid[i][j] == 1)
                    return -1;

            }
        }

        return mins;

    }
};
