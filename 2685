class Solution {
public:
    int countCompleteComponents(int n, vector<vector<int>>& edges) {

        vector<vector<int>> graph(n);

        for (int i = 0; i < edges.size(); i++)
        {
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }

        int m = graph.size();
        vector<bool> visited(n, false);

        int completeCount = 0;

        queue<int> q;

        for (int i = 0; i < n; i++)
        {
           if (!visited[i])
           {
               queue<int> q;
               q.push(i);
               visited[i] = true;

               unordered_set<int> componentNodes;
               int edgeCount = 0;

               while (!q.empty())
               {
                   int node = q.front();
                   q.pop();
                   componentNodes.insert(node);

                   for (int neighbor : graph[node])
                   {
                       edgeCount++;
                       if (!visited[neighbor])
                       {
                           visited[neighbor] = true;
                           q.push(neighbor);
                       }
                   }
               }

               int size = componentNodes.size();

               if (edgeCount / 2 == (size * (size - 1)) / 2)
               {
                   completeCount++;
               }
           }
        }

        return completeCount;

    }
};
